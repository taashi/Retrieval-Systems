/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1223
high speed compilation of efficient object code a three pass compiler with the following properties is briefly described the last two passes scan an intermediate language produced by the preceding pass in essentially the reverse of the order in which it was generated so that the first pass is the only one which hasto read the bulky problem oriented input the double scan one in either direction performed by the first two passes allows the compiler to remove locally constant expressions and recursively calculable expressions from loops and to do the important part of common subexpression recognition optimization such as the effective use of index registers although as important is not discussed since the object code which would be most efficient is highly machine dependent the discussion is in terms of a fortran like language although the technique is applicable to most algebraic languages cacm august 1965 gear c w ca650801 jb march 6 1978 845 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1947
object code optimization methods of analyzing the control flow and data flow of programs during compilation are applied to transforming the program to improve object time efficiency dominance relationships indicating which statements are necessarily executed before others are used to do global common expression elimination and loop identification implementation of these and other optimizations in os360 fortran h are described cacm january 1969 lowry e s medlock c w compilers data flow analysis dominance efficiency fortran graph theory loop structure machine instructions object code optimization redundancy elimination register assignment system360 412 524 532 ca690102 jb february 20 1978 1215 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2495
adapting optimal code generation for arithmetic expressions to the instruction sets available on present day computers cacm june 1973 stockhausen p f arithmetic expressions code generation compilers object code optimization register assignment trees 412 524 532 ca730605 jb january 23 1978 224 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1658
analysis of algorithms for the zero one programming problem this paper is concerned with a review and examination of several existing algorithms for the zero one programming problem computational experience is summarized the machine time and storage requirements of several of the algorithms are compared over several test problems of small and intermediate size computer experiments still provide little hope of solving problems with over 100 variables with a reasonable amount of machine time cacm december 1968 gue r l liggett j c cain k c operations research optimization theory integer programming zero one variables algorithms 539 541 ca681208 jb february 21 1978 131 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1757
data code for calendar date for machine to machine data interchange proposed usa standard cacm april 1968 usa standard data code calendar date machine to machine data interchange recording calendar date data group identifier 20 211 219 23 240 243 249 350 352 353 355 356 359 370 371 373 374 379 381 41 49 ca680413 jb february 23 1978 1018 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2491
threaded code the concept of threaded code is presented as an alternative to machine language code hardware and software realizations of it are given in software it is realized as interpretive code not needing an interpreter extensions and optimizations are mentioned cacm june 1973 bell j r interpreter machine code time tradeoff space tradeoff compiled code subroutine calls threaded code 412 413 633 ca730609 jb january 23 1978 205 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1795
optimal code for serial and parallel computation cacm december 1969 fateman r j code optimization sequencing of operations detection of common subexpressions 412 ca691217 jb february 15 1978 159 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2897
a case study of a new code generation technique for compilers recent developments in optimizing techniques have allowed a new design for compilers to emerge such a compiler translates the parsed source code into lower level code by a sequence of steps each step expands higher level statements into blocks of lower level code and then performs optimizations on the result each statement has only one possible expansion the task of tailoring this code to take advantage of any special cases is done by the optimizations this paper provides evidence that this strategy can indeed result in good object code the traditionally difficult pli concatenate statement was investigated as a detailed example a set of fairly simple optimizations was identified which allow the compiler to produce good code more elaborate optimizations can further improve the object code for most contexts of the concatenate statement the code produced by a compiler using the expansion optimization strategy described above compares favorably with the code produced by a conventional pli optimizing compiler cacm december 1977 carter j l compiler structure optimizing compiler code generation pli compiler concatenation program optimization optimization techniques data flow analysis 412 413 422 ca771203 jb february 1 1980 354 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2253
index ranges for matrix calculi the paper describes a scheme for symbolic manipulation of index expressions which arise as a by product of the symbolic manipulation of expressions in the matrix calculi described by the authors in a previous paper this scheme attempts program optimization by transforming the original algorithm rather than the machine code the goal is to automatically generate code for handling the tedious address calculations necessitated by complicated data structures the paper is therefore preoccupied with indexing by position the relationship of indexing by name and indexing by position is discussed cacm december 1972 bayer r witzgall c address calculations algorithm transformation compilation data structures indexing by name indexing by position index domain index map index range matrix expressions normal form programming languages program optimization range operations symbolic manipulation syntactic analysis well formed expressions 412 422 514 ca721202 jb january 27 1978 112 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2748
indirect threaded code an efficient arrangement for interpretive code is described it is related to bells notion of threaded code but requires less space and is more amenable to machine independent implementations cacm june 1975 dewar r b k threaded code snobol4 interpretors code generation 412 413 ca750605 jb january 9 1978 111 pm 
****************************
