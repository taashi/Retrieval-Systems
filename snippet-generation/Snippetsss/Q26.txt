/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2626
protection and the control of information sharing in multics the design of mechanisms to control the sharing of information in the multics system is described five design principles help provide insight into the tradeoffs among different possible designs the key mechanisms described include access control lists hierarchical control of access specifications identification and authentication of users and primary memory protection the paper ends with a discussion of several known weaknesses in the current protection mechanism design cacm july 1974 saltzer j h multics protection security privacy access control authentication computer utilities time sharing systems proprietary programs protected subsystems virtual memory descriptors 370 430 62 ca740705 jb january 17 1978 1249 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2632
hydra the kernel of a multiprocessor operating system this paper describes the design philosophy of hydra the kernel of an operating system for cmmp the carnegie mellon multi mini processor this philosophy is realized through the introduction of a generalized notion of resource both physical and virtual called an object mechanisms are presented for dealing with objects including the creation of new types specification of new operations applicable to a given type sharing and protection of any reference to a given object against improper application of any of the operations defined with respect to that type of object the mechanisms provide a coherent basis for extension of the system in two directions the introduction of new facilities and the creation of highly secure systems cacm june 1974 wulf w cohen e corwin w jones a levin r pierson c pollack f operating system kernel nucleus protection security 43 62 ca740614 jb january 17 1978 240 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3105
a language extension for expressing constraints on data access controlled sharing of information is needed and desirable for many applications and is supported in operating systems by access control mechanisms this paper shows how to extend programming languages to provide controlled sharing the extension permits expression of access constraints on shared data access constraints can apply both to simple objects and to objects that are components of larger objects such as bank account records in a banks data base the constraints are stated declaratively and can be enforced by static checking similar to type checking the approach can be used to extend any strongly typed language but is particularly suitable for extending languages that support the notion of abstract data types cacm may 1978 jones a liskov b programming languages access control data types abstract data types type checking capabilities 420 435 ca780502 dh february 26 1979 319 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2840
protection in operating systems a model of protection mechanisms in computing systems is presented and its appropriateness is argued the safety problem for protection systems under this model is to determine in a given situation whether a subject can acquire a particular right to an object in restricted cases it can be shown that this problem is decidable ie there is an algorithm to determine whether a system in a particular configuration is safe in general and under surprisingly weak assumptions it cannot be decided if a situation is safe various implications of this fact are discussed cacm august 1976 harrison m a ruzzo w l ullman j d protection protection system operating system decidability turing machine 430 431 524 ca760804 jb january 4 1978 1012 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2377
a hardware architecture for implementing protection rings protection of computations and information is an important aspect of a computer utility in a system which uses segmentation as a memory addressing scheme protection can be achieved in part by associating concentric rings of decreasing access privilege with a computation this paper describes hardware processor mechanisms for implementing these rings of protection the mechanisms for implementing these rings of protection the mechanisms allow cross ring calls and subsequent returns to occur without trapping to the supervisor automatic hardware validation of references across ring boundaries is also performed thus a call by a user procedure to a protected subsystem including the supervisor is identical to a call to a companion user procedure the mechanisms of passing and referencing arguments are the same in both cases as well cacm march 1972 schroeder m d saltzer j h protection protection rings protection hardware access control hardware access control computer utility time sharing shared information segmentation virtual memory multics 432 621 ca720304 jb january 31 1978 258 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2939
abstraction mechanisms in clu clu is a new programming language designed to support the use of abstractions in program construction work in programming methodology has led to the realization that three kinds of abstractions procedural control and especially data abstractions are useful in the programming process of these only the procedural abstraction is supported well by conventional languages through the procedure or subroutine clu provides in addition to procedures novel linguistic mechanisms that support the use of data and control abstractions this paper provides an in troduction to the abstraction mechanisms in clu by means of programming examples the utility of the three kinds of abstractions in program construction is illustrated and it is shown how clu programs may be written to use and implement abstractions the clu library which permits incremental program development with complete type checking performed at compile time is also discussed cacm august 1977 liskov b snyder a atkinson r schaffert c programming languages data types data abstractions control abstractions programming methodology separate compilation 40 412 420 422 ca770804 jb december 28 1977 749 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3128
synchronization with eventcounts and sequencers synchronization of concurrent processes requires controlling the relative ordering of events in the processes a new synchronization mechanism is proposed using abstract objects called eventcounts and sequencers that allows processes to control the ordering of events directly rather than using mutual exclusion to protect manipulations of shared variables that control ordering of events direct control of ordering seems to simplify correctness arguments and also simplifies implementation in distributed systems the mechanism is defined formally and then several examples of its use are given the relationship of the mechanism to protection mechanisms in the system is explained in particular eventcounts are shown to be applicable to situations where confinement of information matters an implementation of eventcount s and sequencers in a system with shared memory is described cacm february 1979 reed d kanodia r process synchronization interprocess communication distributed systems security models mutual exclusion semaphores 430 432 ca790207 dh april 12 1979 1003 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2541
an overview of the ispl computer system design this paper explores the advantages of the concurrent design of the language operating system and machine via microcode to create an interactive programming laboratory it describes the synergistic effect that the freedom to move and alter features from one of these domains to another has had on the design of this system which has not been implemented this freedom simplified both incremental compilation and the systems addressing structure and centralized the communication mechanisms enabling the construction of hierarchical subsystems it also suggested an important new concept for operating systems separation of the scheduling from the maintenance functions in resource allocation this separation enables incorporation of new scheduling algorithms decision of what to do without endangering the system integration correctly performing the scheduling decisions cacm february 1973 balzer r m concurrent design operating system scheduling interprogram communication incremental compilation virtual addressing debugging hierarchical subsystems 40 413 422 430 432 441 442 620 ca730207 jb january 24 1978 159 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2870
a lattice model of secure information flow this paper investigates mechanisms that guarantee secure information flow in a computer system these mechanisms are examined within a mathematical framework suitable for formulating the requirements of secure information flow among security classes the central component of the model is a lattice structure derived from the security classes and justified by the semantics of information flow the lattice properties permit concise formulations of the security requirements of different existing systems and facilitate the construction of mechanisms that enforce security the model provides a unifying view of all systems that restrict information flow enables a classification of them according to security objectives and suggests some new approaches it also leads to the construction of automatic program certification mechanisms for verifying the secure flow of information through a program cacm may 1976 denning d e protection security information flow security class lattice program certification 435 ca760501 jb january 4 1978 410 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2080
the nucleus of a multiprogramming system this paper describes the philosophy and structure of a multiprogramming system that can be extended with a hierarchy of operating systems to suit diverse requirements of program scheduling and resource allocation the system nucleus simulates an environment in which program execution and inputoutput are handled uniformly as parallel cooperating process es a fundamental set of primitives allows the dynamic creation and control of a hierarchy of processes as well as the communication among them cacm april 1970 hansen p b multiprogramming operating systems parallel processes process concept process communication message buffering process hierarchy process creation process removal 430 431 432 441 ca700404 jb february 13 1978 310 pm 
****************************
