/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2625
capability based addressing various addressing schemes making use of segment tables are examined the inadequacies of these schemes when dealing with shared addresses are explained these inadequacies are traced to the lack of an efficient absolute address for objects in these systems the direct use of a capability as an address is shown to overcome these difficulties because it provides the needed absolute address implementation of capability based addressing is discussed it is predicted that the use of tags to identify capabilities will dominate a hardware address translation scheme which never requires the modification of the representation of capabilities is suggested the scheme uses a main memory hash table for obtaining a segments location in main memory given its unique code the hash table is avoided for recently accessed segments by means of a set of associative registers a computer using capability based addressing may be substantially superior to present systems on the basis of protection simplicity of programming conventions and efficient implementation cacm july 1974 fabry r s addressing capabilities addressing hardware protection protection hardware shared addresses information sharing operating systems computer utility segmentation tagged architecture 430 432 434 621 ca740706 jb january 17 1978 1239 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1869
block structures indirect addressing and garbage collection programming languages have included explicit or implicit block structures to provide a naming convenience for the programmer however when indirect addressing is used as in snobol naming constraints may be introduced two modifications to snobol are described resulting in two desirable consequences 1 naming constraints disappear even when there is indirect addressing within function definitions and 2 there is a significant saving in the number of calls to the garbage collector because some garbage is collected at little expense each time a function returns to its calling program these modifications have been implemented as an extension to a snobol dialect cacm july 1969 kain r y block structures indirect addressing garbage collection local names snobol 422 ca690711 jb february 15 1978 649 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2541
an overview of the ispl computer system design this paper explores the advantages of the concurrent design of the language operating system and machine via microcode to create an interactive programming laboratory it describes the synergistic effect that the freedom to move and alter features from one of these domains to another has had on the design of this system which has not been implemented this freedom simplified both incremental compilation and the systems addressing structure and centralized the communication mechanisms enabling the construction of hierarchical subsystems it also suggested an important new concept for operating systems separation of the scheduling from the maintenance functions in resource allocation this separation enables incorporation of new scheduling algorithms decision of what to do without endangering the system integration correctly performing the scheduling decisions cacm february 1973 balzer r m concurrent design operating system scheduling interprogram communication incremental compilation virtual addressing debugging hierarchical subsystems 40 413 422 430 432 441 442 620 ca730207 jb january 24 1978 159 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-0912
addressing an array yi in k dimensions by fortran for analysis of variance cacm march 1963 garber m j ca630309 jb march 14 1978 144 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2858
a process for the determination of addresses in variable length addressing an algorithm is presented for the assignment of instruction addresses and formats under the following conditions 1 the length of the instruction varies as a function of the distance of the instruction from its target 2 there exists an optimality criterion which implies some preferential choices subject to the addressing constraints this may be for example achieving the smallest number of long instructions in which case the total code length is minimized or minimizing the assigned address of a specified point in the program the algorithm is suitable for arbitrary program structure and a choice of optimization criteria cacm june 1976 frieder g saal h j variable length addressing assembler paging 411 412 ca760604 jb january 4 1978 209 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1785
scatter storage techniques scatter storage techniques as a method for implementing the symbol tables of assemblers and compilers are reviewed and a number of ways of using them more effectively are presented many of the most useful variants of the techniques are documented cacm january 1968 morris r scatter storage hash addressing searching file searching file addressing storage layout 373 374 ca680109 jb february 23 1978 226 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2830
a practitioners guide to addressing algorithms corrigendum cacm september 1976 severance d g duhne r a ca760909 jb january 4 1978 843 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2194
how to keep the addresses short an algorithm is presented for minimizing the sum of the lengths of the blocks of coding produced by an assembler or compiler when 1 the length of each computer instruction is assumed to be either long or short long if the memory location addressed is more than a predetermined distance from the current location short otherwise and 2 there are blocks of instructions whose beginnings origins are separated by prespecified amounts for example some computers permit either 8 bit addressing interpreted relative to the location counter or full 16 bit addressing of all of memory when assembling or compiling two or more blocks of instructions which have many mutual references in such a computer there is no simple iterative procedure for keeping as many of the addresses short as possible this paper demonstrates that a wide class of problems of this type can be formulated as covering problems solvable by means of elementary arithmetic operations on the column vectors of a ternary matrix cacm may 1971 richards d l addressing assembler covering problem integer programming variable length addressing 411 412 421 541 ca710505 jb february 3 1978 240 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3083
pseudochaining in hash tables this paper presents pseudochaining as a new collision resolution method pseudochaining is half way between open addressing and chaining it owes its name to the fact that link fields are present in each cell of the hash table which permits chaining of the first overflow items in the table the efficiency of the method is derived and a tradeoff analysis is given cacm july 1978 halatsis c philokyprou g hash code scatter storage open addressing chaining pseudochaining collision resolution searching uniform probing 37 373 374 49 ca780705 dh february 7 1979 437 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2991
improving the access time for random access files clustering in the key set is decreased by smoothing the key to address transformation and by adding shadow buckets to an open chaining file the keys are pre hashed before the address division to remove the effect of sequential properties in the key set shadow buckets in the key search sequence reduce the effect of nonuniformity in file loading and decrease the number of maximum probes needed to locate a record the combined effects of these techniques lead to improved file performance for secondary storage devices as shown by empirical studies cacm march 1977 clapson p hashing hashing techniques hashing methods hash coding keys key transformation key to address transformation direct addressing direct access direct access method randomizing random access file addressing file organizations file structures scatter storage search method collisions synonyms clustering information retrieval open addressing open chaining buckets bucket size shadow buckets combinatorics 37 372 373 374 49 539 ca770301 jb december 30 1977 200 am 
****************************
