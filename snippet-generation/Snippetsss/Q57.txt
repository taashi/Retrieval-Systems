/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3077
can programming be liberated from the von neumann style a functional style and its algebra of programs conventional programming languages are growing ever more enormous but not stronger inherent defects at the most basic level cause them to be both fat and weak their primitive word at a time style of programming inherited from their common ancestor the von neumann computer their close coupling off semantics to state transitions their division of programming into a world of expressions and a world of statements their inability to effectively use powerful combining forms for building new programs from existing ones and their lack of useful mathematical properties for reasoning about programs an alternative functional style of programming is founded on the use of combining forms for creating programs functional programs deal with structured data are often nonrepetitive and nonrecursive are hierarchically constructed do not name their arguments and do not require the complex machinery of procedure declarations to become generally applicable combining forms can use high level programs to build still higher level ones in a style not possible in conventional languages associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms this algebra can be used to transform programs and to solve equations whose unknowns are programs in much the same way one transforms equations in high school algebra these transformations are given by algebraic laws and are carried out in the same language in which programs are written combining forms are chosen not only for their programming power but also for the power of their associated algebraic laws general theorems of of the algebra give the detailed behavior and termination conditions for large classes of programs a new class of computing systems uses the functional programming style both in its programming language and in its state transition rules unlike von neumann languages these systems have semantics loosely coupled to states only one state transition occurs per major computation cacm august 1978 backus j functional programming algebra of programs combining forms functional forms programming languages von neumann computers von neumann languages models of computing systems applicative computing systems applicative state transition systems program transformation program correctness program termination metacomposition 420 429 520 524 526 ca780801 dh february 7 1979 313 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3140
social processes and proofs of theorems and programs it is argued that formal verifications of programs no matter how obtained will not play the same key role in the development of computer science and software engineering as proofs do in mathematics furthermore the absence of continuity the inevitability of change and the complexity of specification of significantly many real programs make the form al verification process difficult to justify and manage it is felt that ease of formal verification should not dominate program language design cacm may 1979 de millo r lipton r perlis a formal mathematics mathematical proofs program verification program specification 210 46 524 ca790501 dh june 5 1979 223 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1705
a set of basic input output procedures algorithm 335 15 by means of the primitives in symbol outsymbol and length as requested by this journals algorithms policy comm acm 10 nov 67 729 a basic set of input output procedures is defined aiming at quality and flexibility outreal for instance is written as a derived procedure it outputs using the fixed point or the floating point representation and rounds properly variants can easily be written because of the explicit call of the procedures decompose integer and decompose real the highly recommended practice of echoing input is made easy with one subset of derived procedures ioi ior iob ioa the documentation of output in the form of equivalent algol statements is also provided when use is made of the subset oti otr otb ota the berkeley style of providing information on the form of output using prior calls of procedures such as real format is defined a use of the parameter outchannel to provide information for simultaneous output to several channels is suggested interrelationship between the declared procedures is furnished in tabular form cacm august 1968 de vogelaere r input output transput input output procedures input echo quality output decompose integer decompose real style berkeley style procedures relationship output documentation equivalent algol statements algol algol 60 integer format real format out integer read real input output boolean input output array fixed point representation floating point representation output channel interpretation 40 441 ca680809 jb february 22 1978 1032 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3008
preserving average proximity in arrays programmers and data structure designers are often forced to choose between alternative structures in storing these structures preserving logical adjacencies or proximity is usually an important consideration the combinatorial problem of storing arrays as various kinds of list structures is examined embeddings of graphs are used to model the loss of proximity involved in such storage schemes and an elementary proof that arrays cannot be stored as linear lists with bounded loss of proximity is presented average loss of proximity is then considered and it is shown that arrays cannot be stored as linear lists with only bounded loss of average proximity but can be so stored in binary trees the former result implies for instance that row major order is an asymptotically optimal storage strategy for arrays cacm march 1978 demillo r eisenstat s lipton r arrays graph embedding linear lists proximity average proximity trees 434 524 525 532 ca780305 jb march 28 1978 107 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-0196
report on the algorithmic language algol 60 naur p backus j cacm may 1960 ca600501 jb march 22 1978 134 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1132
an extension to algol for manipulating formulae cacm february 1964 perlis a j iturriaga r ca640211 jb march 10 1978 345 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2700
reduction a method of proving properties of parallel programs when proving that a parallel program has a given property it is often convenient to assume that a statement is indivisible ie that the statement cannot be interleaved with the rest of the program here sufficient conditions are obtained to show that the assumption that a statement is indivisible can be relaxed and still preserve properties such as halting thus correctness proofs of a parallel system can often be greatly simplified cacm december 1975 lipton r j deadlock free reduction interruptible indivisible parallel program semaphore verification method process computation sequence 432 435 524 ca751207 jb january 5 1978 359 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2705
programming languages natural languages and mathematics some social aspects of programming are illuminated through analogies with similar aspects of mathematics and natural languages the split between pure and applied mathematics is found similarly in programming the development of natural languages toward flexion less word order based language types speaks for programming language design based on general abstract constructs by analogy with incidents of the history of artificial auxiliary languages it is suggested that fortran and cobol will remain dominant for a long time to come the most promising avenues for further work of wide influence are seen to be high quality program literature ie programs of general utility and studies of questions related to program style cacm december 1975 naur p analogies related to social aspects pure and applied mathematics language quality language development artificial auxiliary languages literature style descriptive and prescriptive attitudes 420 ca751202 jb january 6 1978 830 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2922
two level control structure for nondeterministic programming the basic ideas of nondeterministic programming are critically reconsidered to single out a proper attitude and programming style for language allowing direct control of nondeterministic features the proposed attitude aims at retaining the purity of the nondeterministic formulation of search processes on one level the attempt level deferring the coordination of problem solving efforts to another the choice level the feasibility of recognizing these two levels is discussed stressing that the structure to be managed at the choice level is a free of contexts the leaves are computational environments each holding an alternative under inspection while the other nodes are associated with choice poin ts according to the proposed programming style a generative function is associated with each choice poin t which expresses the desired choice strategy the main advantage on this approach is the localization of the search strategies each nonterminal node of the tree keeps track of the state of the computation as it was when the choice poin t was last interrogated holding at the same time the strategy to coordinate the available alternatives examples are given in term of nd lisp an extension of lisp designed and implemented according to these guidelines cacm october 1977 montangero c pacini g turini f nondeterministic programming artificial in telligence control structures backtracking search strategy planning context tree 364 422 ca771004 jb december 27 1977 1130 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1764
panel discussion on computer appreciation session 19 of the acm 20 th anniversary conference on august 31 1967 was entitled education design experiments and computer appreciation its second half consisted of a panel discussion on computer appreciation organized and chaired by elliot i organick the four panelists were charles h davidson bernard a galler richard w hamming and alan j perlis after making prepared statements the panelists were joined in discussion by andries van dam and arthur bohn who had presented papers in the first half this is a transcript of the panel discussion condensed by dr organick and edited by him and the panelists some remarks referred to papers by van dam and kahn or to the discussion during the first half of the session pertinent papers are included in the references cacm april 1968 organick e i computer appreciation students liberal arts courses survey courses beginning programming course content computer courses dropout rates college versus precollege teaching and social responsibility 11 151 152 ca680406 jb february 23 1978 1034 am 
****************************
