/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2679
some performance tests of quicksort and descendants detailed performance evaluations are presented for six acm algorithms quicksort no 64 shellsort no 201 stringsort no 207 treesort3 no 245 quickersort no 271 and qsort no 402 algorithms 271 and 402 are refinements of algorithm 64 and all three are discussed in some detail the evidence given here demonstrates that qsort no 402 requires many more comparisons than its author claims of all these algorithms quickersort requires the fewest comparisons to sort random arrays cacm march 1974 loeser r sorting in place sorting sorting efficiency sorting performance tests quicksort quickersort qsort shellsort stringsort treesort3 utility sort algorithm general purpose sort algorithm sorting algorithm documentation 449 531 ca740304 jb january 18 1978 1126 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3132
experiments with some algorithms that find central solutions for pattern classification in two class pattern recognition it is a standard technique to have an algorithm finding hyperplanes which separates the two classes in a linearly separable training set the traditional methods find a hyperplane which separates all points in the other but such a hyperplane is not necessarily centered in the empty space between the two classes since a central hyperplane does not favor one class or the other it should have a lower error rate in classifying new points and is therefore better than a noncentral hyperplane six algorithms for finding central hyperplanes are tested on three data sets although frequently used practice the modified relaxation algorithm is very poor three algorithms which are defined in the paper are found to be quite good cacm march 1979 slagle j pattern recognition pattern classification linear discriminants central hyperplanes centering centrality criteria dead zone hyperplane linearly separable relaxation algorithm accelerated relaxation 362 363 ca790303 dh april 12 1979 320 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2674
scan conversion algorithms for a cell organized raster display raster scan computer graphics with real time character generators have previously been limited to alphanumeric characters a display has been described which extends the capabilities of this organization to include general graphics two fundamentally different scan conversion algorithms which have been developed to support this display are presented one is most suitable to non interactive applications and the other to interactive applications the algorithms were implemented in fortran on the cdc 6400 computer results obtained from the implementations show that the noninteractive algorithms can significantly reduce display file storage requirements at little cost in execution time over that of a conventional raster display the interactive algorithm can improve response time and reduce storage requirements cacm march 1974 barrett r c fordan b w jr graphics scan conversion raster display line drawing discrete image dot generation matrix displays 441 635 82 ca740309 jb january 18 1978 1108 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2976
approximating block accesses in database organizations cacm april 1977 yao s b database inverted file organization database performance and measurement information retrieval query answering 370 372 433 ca770406 jb december 29 1977 506 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3131
focus microcomputer number system focus is a number system and supporting computational algorithms especially useful for microcomputer control and other signal processing applications focus has the wide ranging character of floating point numbers with a uniformity of state distributions that give focus better than a twofold accuracy advantage over an equal word length floating point system focus computations are typically five times faster than single precision fixed point or integer arithmetic for a mixture of operations comparable in speed with hardware arithmetic for many applications algorithms for 8 bit and 16 bit implementations of focus are included cacm march 1979 edgar a lee s number representation logarithmic arithmetic computational speed computational accuracy microcomputer applications 324 380 40 422 511 ca790302 dh april 12 1979 1112 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2348
merge sort algorithm m1 algorithm a426 cacm may 1972 bron c sort merge 531 ca720512 jb january 31 1978 933 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3164
progressive acyclic digraphs a tool for database integrity a progressive acyclic digraph pad algorithm accepts are requests and maintains a graph in an acyclic state when a request creates a cycle nodes are detached until the new are can be entered acyclically this process is important in certain areas of database implementation in which there are constraints on the permissible sequences of actions two pad algorithms are presented one uses a simple path matrix representation and the other uses a list with an artificial gradient experiments suggest that for large n the second is considerably faster though both are asymptotically onr where n is the number of nodes and r is the expected number of nodes reachable along paths from any given node cacm september 1979 hansen w list processing data structures topological sort acyclic digraph database integrity network deadlock 434 532 433 ca790905 db january 14 1980 1156 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2964
an approach to optimal design of storage parameters in databases cacm may 1977 milman y database organization storage parameter optimization resident overflow storage 373 374 ca770508 jb december 29 1977 148 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3112
list processing in real time on a serial computer a real time list processing system is one in which the time required by the elementary list operations eg cons car cdr rplaca replacd eq and atom in lisp is bounded by a small constant classical implementations of list processing systems lack this property because allocating a list cell from the heap may cause a garbage collection which process requires time proportional to the heap size to finish a real time list processing system is presented which continuously reclaims garbage including directed cycles while linearizing and compacting the accessible cells into contiguous locations to avoid fragmenting the free storage pool the program is small and requires no time sharing interrupts making it suitable for microcode finally the system requires the same average time and not more than twice the space of a classical implementation and those space requirements can be reduced to approximately classical proportions by compact list representation arrays of different sizes a program stack and hash linking are simple extensions to our system and reference counting is found to be inferior for many applications cacm april 1978 baker h real time compacting garbage collection list processing virtual memory file or database management storage management storage allocation lisp cdr coding reference counting 350 360 373 380 413 422 432 433 435 449 ca780404 dh february 26 1979 432 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3017
b trees re examined the b tree and its variants have with increasing frequency been proposed as a basic storage structure for multiuser database applications here three potential problems which must be dealt with in such a structure that do not arise in more traditional static directory structures are indicated one problem is a possible performance penalty cacm february 1978 held g stonebraker m b tree directory static directory dynamic directory index sequential access method 370 373 374 433 434 ca780206 jb march 28 1978 346 pm 
****************************
