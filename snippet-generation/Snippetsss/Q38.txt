/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2867
modularization and hierarchy in a family of operating systems this paper describes the design philosophy used in the construction of a family of operating systems it is shown that the concepts of module and level do not coincide in a hierarchy of functions family members can share much software as a result of the implementation of run time modules at the lowest system level cacm may 1976 habermann a n flon l cooprider l incremental machine design module data type address space virtual memory 40 430 435 ca760504 jb january 4 1978 333 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3031
abstract data types and software validation a data abstraction can be naturally specified using algebraic axioms the virtue of these axioms is that they permit a representation independent formal specification of a data type an example is given which shows how to employ algebraic axioms at successive levels of implementation the major thrust of the paper is twofold first it is shown how the use of algebraic axiomatizations can simplify the process of proving the correctness of an implementation of an abstract data type second semi automatic tools are described which can be used both to automate such proofs of correctness and to derive an immediate implementation from the axioms this implementation allows for limited testing of programs at design time before a conventional implementation is accomplished cacm december 1978 guttag j horowitz e musser d abstract data type correctness proof data type data structure specification 434 524 ca781208 dh january 18 1979 251 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2941
early experience with mesa the experiences of mesas first users primarily its implementers are discussed and some implications for mesa and similar programming languages are suggested the specific topics addressed are module structure and its use in defining abstractions data structuring facilities in mesa an equivalence algorithm for types and type coercions the benefits of the type system and why it is breached occasionally and the difficulty of making the treatment of variant records safe cacm august 1977 geschke c m morris j h jr satterthwaite e h programming languages types modules data structures systems programming 422 ca770802 jb december 28 1977 807 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2470
fen an axiomatic basis for program semantics a formal system is presented which abstracts the notions of data item function and relation it is argued that the system is more suitable than set theory or its derivatives for the concise and accurate description of program semantics it is shown how the system can be used to build composite data types out of simper ones with the operations of rowing structuring and uniting it is also demonstrated that completely new primitive types can be introduced into languages through the mechanism of singleton data types both deterministic and nondeterministic functions are shown to be definable in the system it is described how the local environment can be modeled as a data item and how imperative statements can be considered functions on the environment the nature of recursive functions is briefly discussed and a technique is presented by which they can be introduced into the system the technique is contrasted with the use of the paradoxical combinator y the questions of local and global environments and of various modes of function calling and parameter passing are touched upon the theory is applied to the proof of several elementary theorems concerning the semantics of the assignment conditional and iterative statements an appendix is included which presents in detail the formal system governing webs and fen the abstractions used informally in the body of the paper cacm august 1973 maclennan b j semantics formal systems lambda calculus extensible languages data types modes axioms correctness formal language definition formal description data structures description languages models of computation 422 521 524 526 ca730804 jb january 23 1978 1101 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3105
a language extension for expressing constraints on data access controlled sharing of information is needed and desirable for many applications and is supported in operating systems by access control mechanisms this paper shows how to extend programming languages to provide controlled sharing the extension permits expression of access constraints on shared data access constraints can apply both to simple objects and to objects that are components of larger objects such as bank account records in a banks data base the constraints are stated declaratively and can be enforced by static checking similar to type checking the approach can be used to extend any strongly typed language but is particularly suitable for extending languages that support the notion of abstract data types cacm may 1978 jones a liskov b programming languages access control data types abstract data types type checking capabilities 420 435 ca780502 dh february 26 1979 319 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1698
a statistical model for console behavior in multiuser computers the ability of a computer system to communicate with the outside world efficiently is as important as its ability to perform computations efficiently it is quite difficult to characterize a particular user but rather easy to characterize the entire user community based on the properties of this community we have postulated a hypothetical virtual console no claim is made that a virtual console behaves like any actual console but the entire collection of virtual consoles models the collection of actual consoles using the model we answer questions like how many processes are suspended waiting for console input what is the maximum rate at which a process can execute what bounds can be set on overall buffer requirements answers to these and similar questions are needed in certain aspects of operating system design cacm september 1968 denning p j statistical models for input output operating system design input output design 430 441 55 ca680903 jb february 22 1978 921 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3177
how to share a secret in this paper we show how to divide data d into n pieces in such a way that d is easily reconstructable from any k pieces but even complete knowledge of k 1 pieces reveals olutely no information about d this technique enables the construction of robust key management schemes for cryptographic systems that can function securely and reliably even when misfortunes destroy half the pieces and security breaches expose all but one of the remaining pieces cacm november 1979 shamir a cryptography key management interpolation 539 56 ca791105 db january 23 1980 1148 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2582
improving locality by critical working sets a new approach to program locality improvement via restructuring is described the method is particularly suited to those systems where primary memory is managed according to a working set strategy it is based on the concept of critical working set a working set which does not contain the next memory reference the data the method operates upon are extracted from a trace of the program to be restructured it is shown that except in some special cases the method is not optimum however the experimental results obtained by using the method to restructure an interactive text editor and the file system module of an operating system have shown its substantial superiority over the other methods proposed in the literature cacm november 1974 ferrari d program restructuring program segmentation locality improvement memory hierarchies virtual memory multiprogramming restructuring techniques static restructuring dynamic restructuring working set strategy critical working set 432 439 443 449 49 ca741102 jb january 16 1978 1050 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-0595
guides to teaching cobol the teaching of cobol can be divided into three main subject areas they are the syntax of cobol the use of such syntax in solving any given problem and programming concepts it is generally accepted that some knowledge of the hardware and computer logic must be possessed by the programmer the teaching problem arises in determining how thoroughly a student must know the hardware and logic for that computer for which he will write cobol programs unfortunately historical data concerning students programming proficiency is almost non existent and at best difficult to measure how then might we approach solving this problem cacm may 1962 greene i ca620510 jb march 20 1978 144 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2247
on the criteria to be used in decomposing systems into modules this paper discusses modularization as a mechanism for improving the flexibility ad comprehensibility of a system while allowing the shortening of its development time the effectiveness of a modularization is dependent upon the criteria used in dividing the system into modules a system design problem is presented and both a conventional and unconventional decomposition are described it is shown that the unconventional decompositions have distinct advantages for the goals outlined the criteria used in arriving at the decompositions are discussed the unconventional decomposition if implemented with the conventional assumption that a module consists of one or more subroutines will be less efficient in most cases an alternative approach to implementation which does not have this effect is sketched cacm december 1972 parnas d l software modules modularity software engineering kwic index software design 40 ca721208 jb january 27 1978 1109 am 
****************************
