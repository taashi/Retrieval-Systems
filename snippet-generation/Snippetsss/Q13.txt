/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1947
object code optimization methods of analyzing the control flow and data flow of programs during compilation are applied to transforming the program to improve object time efficiency dominance relationships indicating which statements are necessarily executed before others are used to do global common expression elimination and loop identification implementation of these and other optimizations in os360 fortran h are described cacm january 1969 lowry e s medlock c w compilers data flow analysis dominance efficiency fortran graph theory loop structure machine instructions object code optimization redundancy elimination register assignment system360 412 524 532 ca690102 jb february 20 1978 1215 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1795
optimal code for serial and parallel computation cacm december 1969 fateman r j code optimization sequencing of operations detection of common subexpressions 412 ca691217 jb february 15 1978 159 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2495
adapting optimal code generation for arithmetic expressions to the instruction sets available on present day computers cacm june 1973 stockhausen p f arithmetic expressions code generation compilers object code optimization register assignment trees 412 524 532 ca730605 jb january 23 1978 224 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2897
a case study of a new code generation technique for compilers recent developments in optimizing techniques have allowed a new design for compilers to emerge such a compiler translates the parsed source code into lower level code by a sequence of steps each step expands higher level statements into blocks of lower level code and then performs optimizations on the result each statement has only one possible expansion the task of tailoring this code to take advantage of any special cases is done by the optimizations this paper provides evidence that this strategy can indeed result in good object code the traditionally difficult pli concatenate statement was investigated as a detailed example a set of fairly simple optimizations was identified which allow the compiler to produce good code more elaborate optimizations can further improve the object code for most contexts of the concatenate statement the code produced by a compiler using the expansion optimization strategy described above compares favorably with the code produced by a conventional pli optimizing compiler cacm december 1977 carter j l compiler structure optimizing compiler code generation pli compiler concatenation program optimization optimization techniques data flow analysis 412 413 422 ca771203 jb february 1 1980 354 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2748
indirect threaded code an efficient arrangement for interpretive code is described it is related to bells notion of threaded code but requires less space and is more amenable to machine independent implementations cacm june 1975 dewar r b k threaded code snobol4 interpretors code generation 412 413 ca750605 jb january 9 1978 111 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2491
threaded code the concept of threaded code is presented as an alternative to machine language code hardware and software realizations of it are given in software it is realized as interpretive code not needing an interpreter extensions and optimizations are mentioned cacm june 1973 bell j r interpreter machine code time tradeoff space tradeoff compiled code subroutine calls threaded code 412 413 633 ca730609 jb january 23 1978 205 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2559
the reallocation of hash coded tables when the space allocation for a hash coded table is altered the table entries must be rescattered over the new space a technique for accomplishing this rescattering is presented the technique is independent of both the length of the table and the hashing function used and can be utilized in conjunction with a linear reallocation of the table being rescattered moreover it can be used to eliminate previously flagged deletions from any hash coded table or to change from one hashing method to another the efficiency of the technique is discussed and theoretical statistics are given cacm january 1973 bays c reallocation dynamic storage hash code scatter storage deletions 37 373 374 49 ca730102 jb january 24 1978 450 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3080
proving the correctness of heuristically optimized code a system for proving that programs written in a high level language are correctly translated to a low level language is described a primary use of the system is as a post optimization step in code generation the low level language programs need not be generated by a compiler and in fact could be hand coded examples of the usefulness of such a system are given some interesting results are the ability to handle programs that implement recursion by bypassing the start of the program and the detection and pinpointing of a wide class of errors in the low level language programs the examples demonstrate that optimization of the genre of this paper can result in substantially faster operation and the saving of memory in terms of program and stack sizes cacm july 1978 samet h compilers correctness code optimization debugging program verification lisp 412 421 422 524 ca780708 dh february 7 1979 353 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2680
optimal space allocation on disk storage devices when the amount of space required for file storage exceeds the amount which can be kept on line decisions must be made as to which files are to be permanently resident and which mountable these decisions will affect the number of mount requests issued to the operators this is often a bottleneck in a computing facility and reducing the number of mounts thus decreases turnaround time an optimization model for the assignment of files to disk packs and packs to either resident or nonresident status is presented heuristics are suggested for those cases in which it is inefficient to compute the actual optimum cacm march 1974 morgan h l disk analysis disk optimization disk files file systems file scheduling space allocation memory hierarchy 372 373 439 ca740303 jb january 18 1978 1232 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2537
common phrases and minimum space text storage a method for saving storage space for text strings such as compiler diagnostic messages is described the method relies on hand selection of a set of text strings which are common to one or more messages these phrases are then stored only once the storage technique gives rise to a mathematical optimization problem determine how each message should use the available phrases to minimize its storage requirement this problem is nontrivial when phrases which overlap exist however a dynamic programming algorithm is presented which solves the problem in time which grows linearly with the number of characters in the text algorithm 444 applies to this paper cacm march 1973 wagner r a diagnostic messages error messages common phrases minimum space text storage optimization dynamic programming 373 410 541 ca730302 jb january 24 1978 112 pm 
****************************
