/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2651
the treatment of data types in el1 in constructing a general purpose programming language a key issue is providing a sufficient set of data types and associated operations in a manner that permits both natural problem oriented notation and efficient implementation the el1 language contains a number of features specifically designed to simultaneously satisfy both requirements the resulting treatment of data types includes provision for programmer defined data types data types and generic routines programmer control over type conversion and very flexible data type behavior in a context that allows efficient compiled code and compact data representation cacm may 1974 wegbreit b data types modes mode unions type conversion coercion generic functions extensible languages data type definition data description language compilation 412 413 422 ca740502 jb january 17 1978 432 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1878
recovery of reentrant list structures in slip one consequence of the reference count based space recovery system employed by slip is that reentrant list structures are not recovered even when explicitly erased lisp like garbage collection schemes are free of this impediment they however depend on being able to find and mark nodes that are reachable from program variables by tracing all descendants from program variables may then be identified and collected the list creating function list of slip may be amended to mark those lists for which the programmer wishes to assume responsibility given this modification a lisp like garbage collector that recovers abandoned reentrant list structures may then be appended to the slip system cacm july 1969 weizenbaum j list processing slip garbage collection 422 440 ca690702 jb february 17 1978 939 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-0595
guides to teaching cobol the teaching of cobol can be divided into three main subject areas they are the syntax of cobol the use of such syntax in solving any given problem and programming concepts it is generally accepted that some knowledge of the hardware and computer logic must be possessed by the programmer the teaching problem arises in determining how thoroughly a student must know the hardware and logic for that computer for which he will write cobol programs unfortunately historical data concerning students programming proficiency is almost non existent and at best difficult to measure how then might we approach solving this problem cacm may 1962 greene i ca620510 jb march 20 1978 144 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1051
multiword list items the list concept as originally proposed by newell simon and shaw specified single computer words as elements of a list this report describes the use of two or more consecutive words as one element such use results in a considerable saving in both the space required to hold a given amount of data and in the execution time required to perform a given process on the data following a brief description of standard list structures with single word items the multiword items are introduced then variable length items are described along with the corresponding space utilization problems finally several examples are given to illustrate the use of multiword lists this paper attempts to draw together various recent papers which have applied some of these concepts in different ways and indicate how they relate to the more general problems cacm june 1964 comfort w t ca640616 jb march 9 1978 915 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2513
a nonrecursive list moving algorithm an efficient nonrecursive algorithm is given for moving any lisp type list in particular the algorithm requires no storage other than the new nodes into which the list is to be moved and no additional bits per node for marking the algorithm runs in time proportional to the number of nodes in the list the original list structure is destroyed as it is moved cacm may 1973 reingold e m list moving list copying list traversal garbage collection lisp 419 449 ca730507 jb january 23 1978 445 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1853
compact list representation definition garbage collection and system implementation compact lists are stored sequentially in memory rather than chained with pointers since this is not always convenient the swym system permits a list to be chained compact or any combination of the two a description is given of that list representation and the operators implemented most are similar to those of lisp 15 the system garbage collector attempts to make all lists compact it relocates and rearranges all of list storage using temporary storage this unique list compacting garbage collection algorithm is presented in detail several classes of the macros used to implement the system are described finally consideration is given to those design factors essential to the success of a plex processing system implementation cacm september 1969 hansen w j data structure data representation list structure list representation list compact list garbage collection relocation storage reclamation macro primitive list operations plex processing plex pointer list processing system lisp free storage 349 420 422 449 49 ca690902 jb february 15 1978 501 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1957
the list set generator a construct for evaluating set expressions the list set generator is defined and algorithms for its use are given the list set generator is a construct which may be added to a list processing system or any system that handles sets it efficiently generates the set which results from any expression involving sets and set operators the efficiency derives from evaluating the expression as a whole and in parallel rather than evaluating subexpressions and then using those sets to arrive at the final result cacm december 1970 shapiro s c set manipulating list processing set generation sets lists file processing 373 374 422 ca701206 jb february 9 1978 323 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-0497
further remarks on line segment curve fitting using dynamic programming in a recent paper bellman showed how dynamic programming could be used to determine the solution to a problem previously considered by stone the problem comprises the determination given n of the n points of subdivision of a given interval a b and the corresponding line segments that give the best least squares fit to a function gx in the interval bellman confined himself primarily to the analytical derivation suggesting briefly however how the solution of the equation derived for each particular point of subdivision ui could be reduced to a discrete search in this paper the computational procedure is considered more fully and the similarities to some of stones equations are indicated it is further shown that an equation for ui involving no minimization may be found in addition it is shown how bellmans method may be applied to the curve fitting problem when the additional constraints are added that the ends of the line segments must be on the curve cacm august 1962 gluss b ca620831 jb march 17 1978 919 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1046
a compiler building system developed by brooker and morris in a number of articles published during the past two years r a brooker and d morris joined by j rohl in their most recent paper have presented a very interesting programming system that they have developed for the ferranti atlas computer the present paper describes some of the major features of their system it expands on some points that the original authors cover briefly and treats only very lightly some topics to which they devote considerable space the purpose of this paper is purely expository except in some very small details and in some comments it does not intentionally depart from or add to the material published in the listed references cacm july 1964 rosen s ca640701 jb march 9 1978 847 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1456
storage and retrieval of aspects of meaning in directed graph structures an experimental system that uses lisp to make a conceptual dictionary is described the dictionary associates with each english word the syntactic information definitional material and references to the contexts in which it has been used to define other words such relations as class inclusion possession and active or passive actions are used as definitional material the resulting structure serves as a powerful vehicle for research on the logic of question answering examples of methods of inputting information and answering simple english questions are given an important conclusion is that although lisp and other list processing languages are ideally suited for producing complex associative structures they are inadequate vehicles for language processing on any large scale at east until they can use auxiliary memory as a continuous extension of core memory cacm march 1966 simmons r f ca660316 jb march 3 1978 1125 am 
****************************
