/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2138
bliss a language for systems programming a language bliss is described this language is designed so as to be especially suitable for use in writing production software systems for a specific machine the pdp 10 compilers operating systems etc prime design goals of the design are the ability to produce highly efficient object code to allow access to all relevant hardware features of the host machine and to provide a rational means by which to cope with the evolutionary nature of systems programs a major feature which contributes to the realization of these goals is a mechanism permitting the definition of the representation of all data structures in terms of the access algorithm for elements of the structure cacm december 1971 wulf w a russell d b programming languages implementation language systems programming data structures 412 421 422 ca711205 jb february 2 1978 1009 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1988
a formalism for translator interactions a formalism is presented for describing the actions of processors for programming languages compilers interpreters assemblers and their interactions in complex systems such as compiler compilers or extendible languages the formalism here might be used to define and answer such a question as can one do bootstrapping using a meta compiler whose metaphase is interpretive in addition an algorithm is presented for deciding whether or not a given system can be produced from a given set of component processors cacm october 1970 earley j translator compiler interpreter bootstrapping language processor compiler compiler 41 529 ca701002 jb february 10 1978 936 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1811
a case study in programming for parallel processors an affirmative partial answer is provided to the question of whether it is possible to program parallel processor computing systems to efficiently decrease execution time for useful problems parallel processor systems are multiprocessor systems in which several of the processors can simultaneously execute separate tasks of a single job thus cooperating to decrease the solution time of a computational problem the processors have independent instruction counters meaning that each processor executes its own task program relatively independently of the other processors communication between cooperating processors is by means of data in storage shared by all processors a program for the determination of the distribution of current in an electrical network was written for a parallel processor computing system and execution of this program was simulated the data gathered from simulation runs demonstrate the efficient solution of this problem typical of a large class of important problems it is shown that with proper programming solution time when n processors are applied approaches 1n times the solution time for a single processor while improper programming can actually lead to an increase of solution time with the number of processors stability of the method of solution was also investigated cacm december 1969 rosenfeld j l parallel processor parallelism parallel programming multiprocessor multiprogramming tasking storage interference electrical network simulation relaxation jacobi gauss seidel convergence 324 49 514 517 621 ca691201 jb february 15 1978 445 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2714
merging with parallel processors consider two linearly ordered sets a b am bn mn and p pm parallel processors working synchronously the paper presents an algorithm for merging a and b with the p parallel processors which requires at most 2log2 2m13mp mplog2 nm steps if n 2bm b an integer the algorithm requires at most 2log2 m1 mp2b steps in the case where m and n are of the same order of magnitude ie nkm with k being a constant the algorithm requires 2log2 m1 mp3k steps these performances compare very favorably with the previous best parallel merging algorithm batchers algorithm which requires np mn2plog2 m steps in the general case and kmp k12mplog2 m in the special case where nkm cacm october 1975 gavril f parallel processing parallel merging parallel binary insertion 531 ca751005 jb january 6 1978 1050 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3156
computing connected components on parallel computers we present a parallel algorithm which uses n2 processors to find the connected components of an undirected graph with n vertices in time olog2n an olog2n time bound also can be achieved using only nnlog2n processors the algorithm can be used to find the transitive closure of a symmetric boolean matrix we assume that the processors have access to a common memory simultaneous access to the same location is permitted for fetch instructions but not for store instructions cacm august 1979 hirschberg d chandra a sarwate d graph theory parallel processing algorithms transitive closure connected component 525 532 622 ca790802 db january 4 1980 1218 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3075
fast parallel sorting algorithms a parallel bucket sort algorithm is presented that requires time olog n and the use of n processors the algorithm makes use of a technique that requires more space than the product of processors and time a realistic model is used model is used in which no memory contention is permitted a procedure is also presented to sort n numbers in time ok log n using n 1 1k processors for k an arbitrary integer the model of computation for this procedure permits simultaneous fetches from the same memory location cacm august 1978 hirschberg d parallel processing sorting algorithms bucket sort 374 434 525 531 ca780803 dh february 7 1979 1025 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1852
a base for a mobile programming system an algorithm for a macro processor which has been used as the base of an implementation by bootstrapping of processors for programming languages is described this algorithm can be easily implemented on contemporary computing machines experience with programming languages whose implementation is based on this algorithm indicates that such a language can be transferred to a new machine in less than one man week without using the old machine cacm september 1969 orgass r j waite w m bootstrapping macro processing machine independence programming languages implementation techniques 412 422 ca690903 jb february 15 1978 454 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3110
assembling code for machines with span dependent instructions many modern computers contain instructions whose lengths depend on the distance from a given instance of such an instruction to the operand of that instruction this paper considers the problem of minimizing the lengths of programs for such machines an efficient solution is presented for the case in which the operand of every such span dependent instruction is either a label or an assembly time expression of a certain restricted formf this restriction is relaxed by allowing these operands to be more general assembly time expressions then the problem is shown to be np complete cacm april 1978 szymanski t span dependent instructions variable length addressing code generation assemblers compilers np complete computational complexity 411 412 525 ca780406 dh february 26 1979 349 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2112
translation equations input limited transduction expressions or translation equations are used to describe the syntax and left context sensitive semantics for context free languages a formal procedure is given for deriving from a set of translation equations the specifications for a pushdown translator the translator consists of mealy form finite state automata interacting by means of a pushdown stack within the framework described string recognition and parsing may be treated as special cases of the translation problem cacm february 1970 vere s automata turing machines regular expression transduction expression context free languages translation recognizers parsing meta compilers pushdown transducer syntax directed compilers finite state automata 410 412 420 522 ca700203 jb february 14 1978 1049 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-0249
specification languages for mechanical languages and their processors a bakers dozen cacm december 1961 gorn s ca611201 jb march 15 1978 1032 pm 
****************************
