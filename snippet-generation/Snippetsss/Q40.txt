/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1098
a comparison of list processing computer languages including a detailed comparison of comit ipl v lisp 15 and slip a detailed comparison is presented of comit ipl v lisp 15 and slip four well known computer programming languages which among them exhibit all the principal characteristics of existing list processing languages important common features of list processing languages are reviewed forms of data structures which are manipulated necessity for dynamic allocation of storage use of pushdown stores and use of recursive operations principal differences between the four languages under consideration are detailed representations of data both by the programmer and within the machine methods for storage allocation programming formalisms and special processes available including arithmetic facilities and usability in terms of availability documentation learning aids and debugging facilities a rough comparison shows that all the languages discussed have approximately the same speed finally the authors give some heuristics to aid in the selection of one of these languages for use in particular problem applications concluding that no one of the languages considered is distinctly superior in all possible list processing applications cacm april 1964 bobrow d g raphael b ca640410 jb march 10 1978 137 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2956
some ideas on data types in high level languages a number of issues are explored concerning the notion that a data type is a set of values together with a set of primitive operations on those values among these are the need for a notation for iterating over the elements of any finite set instead of the more narrow for i 1 to n notation the use of the domain of an array as a data type the need for a simple notation for allowing types of parameters to be themselves parameters but in a restrictive fashion and resulting problems with conversion of values from one type to another cacm june 1977 gries d gehani n data types generic procedures programming languages 412 420 422 ca770607 jb december 28 1977 127 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3105
a language extension for expressing constraints on data access controlled sharing of information is needed and desirable for many applications and is supported in operating systems by access control mechanisms this paper shows how to extend programming languages to provide controlled sharing the extension permits expression of access constraints on shared data access constraints can apply both to simple objects and to objects that are components of larger objects such as bank account records in a banks data base the constraints are stated declaratively and can be enforced by static checking similar to type checking the approach can be used to extend any strongly typed language but is particularly suitable for extending languages that support the notion of abstract data types cacm may 1978 jones a liskov b programming languages access control data types abstract data types type checking capabilities 420 435 ca780502 dh february 26 1979 319 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1485
the structure of programming languages in this paper the major components of every programming language are identified as 1 the elementary program statement 2 mechanisms for linking elementary statements together 3 the means by which a program can obtain data inputs several alternative forms of each of these components are also described compared and evaluated many examples frequently from list processing languages illustrate the forms described the advantages disadvantages and factors influencing the choice of a form of component for a language are discussed and the paper concludes with the suggestion that programming languages evolve toward one which will permit all the most convenient ways of structuring programs organizing systems and referencing data cacm february 1966 raphael b ca660202 jb march 3 1978 346 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2705
programming languages natural languages and mathematics some social aspects of programming are illuminated through analogies with similar aspects of mathematics and natural languages the split between pure and applied mathematics is found similarly in programming the development of natural languages toward flexion less word order based language types speaks for programming language design based on general abstract constructs by analogy with incidents of the history of artificial auxiliary languages it is suggested that fortran and cobol will remain dominant for a long time to come the most promising avenues for further work of wide influence are seen to be high quality program literature ie programs of general utility and studies of questions related to program style cacm december 1975 naur p analogies related to social aspects pure and applied mathematics language quality language development artificial auxiliary languages literature style descriptive and prescriptive attitudes 420 ca751202 jb january 6 1978 830 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2316
programming languages history and future this paper discusses both the history and future of programming languages higher level languages some of the difficulties in writing such a history are indicated a key part of the paper is a tree showing the chronological development of languages and their interrelationships reasons for the proliferation of languages are given the major languages are listed with the reasons for their importance a section on chronology indicates the happenings of the significant previous time periods and the major topics of 1972 key concepts other than specific languages are discussed cacm july 1972 sammet j e programming languages higher level languages languages history future directions language interrelationships programming language tree programming language history programming language future 12 42 ca720712 jb january 30 1978 138 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2406
a data definition and mapping language a data definition language i sa declarative computer language for specifying data structures most data definition languages concentrate on the declaration of logical data structures with little concern for how these structures are physically realized on a computer system however the need for data definition languages which describe both the logical and physical aspects of data is increasingly apparent such languages will be a key systems as well as in advanced data management systems and distributed data bases this paper reviews past work in the data definition language for describing both logical and physical aspects of data applications of these generalized data definition languages are also discussed cacm december 1973 sibley e h taylor r w data definition language data and storage structure data translation data base management systems file translation 351 370 373 429 482 ca731202 jb january 19 1978 258 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2603
the equivalence of reducing transition languages and deterministic languages the class of reducing transition languages introduced by eickel paul bauer and samelson was shown by morris to be a proper superclass of the simple precedence languages in this paper this result is extended showing that in fact the first class is equivalent to the class of deterministic context free languages cacm september 1974 schkolnick m reducing transition languages syntax controlled generators deterministic context free grammars 412 523 ca740905 jb january 17 1978 852 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2941
early experience with mesa the experiences of mesas first users primarily its implementers are discussed and some implications for mesa and similar programming languages are suggested the specific topics addressed are module structure and its use in defining abstractions data structuring facilities in mesa an equivalence algorithm for types and type coercions the benefits of the type system and why it is breached occasionally and the difficulty of making the treatment of variant records safe cacm august 1977 geschke c m morris j h jr satterthwaite e h programming languages types modules data structures systems programming 422 ca770802 jb december 28 1977 807 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1366
computer simulation discussion of the technique and comparison of languages the purpose of this paper is to present a comparison of some computer simulation languages and of some of the involved in comparing software packages for digital computers are discussed in part i the issue is obvious users of digital computers must choose from available languages or write their own substantial costs can occur particularly in training implementation and computer time if an inappropriate language is chosenore and more computer simulation languages are being developed comparisons and evaluations of existing languages are useful for designers and implementers as well as users the second part is devoted to computer simulation and simulation languages the computational characteristics of simulation are discussed with special attention being paid to a distinction between continuous and discrete change models part iii presents a detailed comparison of six simulation languages and packages simscript clp csl gasp cpss and sol the characteristics of each are summarized in a series of tables the implications of this analysis for designers of languages for users and for implementers are developed the conclusion of the paper is that the packages now available for computer simulation offer features which none of the more general purpose packages do and that analysis of strengths and weaknesses of each suggests ways in which both current and future simulation languages and packages can be improved cacm october 1966 teichroew d lubin j f ca661001 jb march 2 1978 423 pm 
****************************
