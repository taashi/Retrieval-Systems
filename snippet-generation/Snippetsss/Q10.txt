/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2785
glypnir a programming language for illiac iv glypnir is one of the earliest existing languages designed for programming the illiac iv computer the syntax of the language is based on algol 60 but has been extended to allow the programmer explicitly to specify the parallelism of his algorithm in terms of 64 word vectors this paper describes the characteristics goals and philosophy of the language and discusses some of the problems associated with parallel computer architectures cacm march 1975 lawrie d h layman t baer d randal j m glypnir illiac iv programming language parallel computation parallel architecture 42 421 422 ca750303jb january 9 1978 457 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3073
communicating sequential processes this paper suggests that input and output are basic primitives of programming and that parallel composition of communicating sequential processes is a fundamental program structuring method when combined with a development of dijkstras guarded command these concepts are surprisingly versatile their use is illustrated by sample solutions of a variety of familiar programming exercises cacm august 1978 hoare c programming programming languages programming primitives program structures parallel programming concurrency input output guarded commands nondeterminacy coroutines procedures multiple entries multiple exits classes data representations recursion conditional critical regions monitors iterative arrays 420 422 432 ca780805 dh february 7 1979 1007 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2700
reduction a method of proving properties of parallel programs when proving that a parallel program has a given property it is often convenient to assume that a statement is indivisible ie that the statement cannot be interleaved with the rest of the program here sufficient conditions are obtained to show that the assumption that a statement is indivisible can be relaxed and still preserve properties such as halting thus correctness proofs of a parallel system can often be greatly simplified cacm december 1975 lipton r j deadlock free reduction interruptible indivisible parallel program semaphore verification method process computation sequence 432 435 524 ca751207 jb january 5 1978 359 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2714
merging with parallel processors consider two linearly ordered sets a b am bn mn and p pm parallel processors working synchronously the paper presents an algorithm for merging a and b with the p parallel processors which requires at most 2log2 2m13mp mplog2 nm steps if n 2bm b an integer the algorithm requires at most 2log2 m1 mp2b steps in the case where m and n are of the same order of magnitude ie nkm with k being a constant the algorithm requires 2log2 m1 mp3k steps these performances compare very favorably with the previous best parallel merging algorithm batchers algorithm which requires np mn2plog2 m steps in the general case and kmp k12mplog2 m in the special case where nkm cacm october 1975 gavril f parallel processing parallel merging parallel binary insertion 531 ca751005 jb january 6 1978 1050 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2266
a highly parallel algorithm for approximating all zeros of a polynomial with only real zeros an algorithm is described based on newtons method which simultaneously approximates all zeros of a polynomial with only real zeros the algorithm which is conceptually suitable for parallel computation determines its own starting values so that convergence to the zeros is guaranteed multiple zeros and their multiplicity are readily determined at no point in the method is polynomial deflation used cacm november 1972 patrick m l parallel numerical algorithms real polynomials real zeros newtons method starting values guaranteed convergence 515 ca721103 jb january 27 1978 235 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2685
the parallel execution of do loops methods are developed for the parallel execution of different iterations of a do loop both asynchronous multiprocessor computers and array computers are considered practical application to the design of compilers for such computers is discussed cacm february 1974 lamport l parallel computing multiprocessor computers array computers vector computers loops 412 524 ca740204 jb january 18 1978 114 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1795
optimal code for serial and parallel computation cacm december 1969 fateman r j code optimization sequencing of operations detection of common subexpressions 412 ca691217 jb february 15 1978 159 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2973
sorting on a mesh connected parallel computer two algorithms are presented for sorting n2 elements on an n x n mesh connected processor array that require on routing and comparison steps the best previous algorithm takes time on log n the algorithms of this paper are shown to be optimal in time within small constant factors extensions to higher dimensional arrays are also given cacm april 1977 thompson c d kung h t parallel computer parallel sorting parallel merge routing and comparison steps perfect shuffle processor in terconnection pattern 432 525 531 ca770409 jb december 29 1977 458 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1262
procedure oriented language statements to facilitate parallel processing two statements are suggested which allow a programmer writing in a procedure oriented language to indicate sections of program which are to be executed in parallel the statements are do together and hold these serve partly as brackets in establishing a range of parallel operation and partly to define each parallel path within this range do togethers may be nested the statements should be particularly effective for use with computing devices capable of attaining some degree of compute compute overlap cacm may 1965 opler a ca650509 jb march 7 1978 217 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2514
an array grammar programming system a package of fortran programs has been developed that permits a user to interactively design and test array grammars the user can control the rule selection procedure in a derivation or parse using weighted programming matrices he also has a choice of instance selection schemes raster random parallel examples are given involving array languages consisting of simple geometrical patterns as well as a language of neuron pictures cacm may 1973 mercer a rosenfeld a picture grammars array grammars 363 523 82 ca730506 jb january 23 1978 449 pm 
****************************
