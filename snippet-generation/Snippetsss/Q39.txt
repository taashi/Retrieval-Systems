/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2651
the treatment of data types in el1 in constructing a general purpose programming language a key issue is providing a sufficient set of data types and associated operations in a manner that permits both natural problem oriented notation and efficient implementation the el1 language contains a number of features specifically designed to simultaneously satisfy both requirements the resulting treatment of data types includes provision for programmer defined data types data types and generic routines programmer control over type conversion and very flexible data type behavior in a context that allows efficient compiled code and compact data representation cacm may 1974 wegbreit b data types modes mode unions type conversion coercion generic functions extensible languages data type definition data description language compilation 412 413 422 ca740502 jb january 17 1978 432 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2940
abstraction and verification in alphard defining and specifying iteration and generators the alphard form provides the programmer with a great deal of control over the implementation of abstract data types in this paper the abstraction techniques are extended from simple data representation and function definition to the iteration statement the most important poin t of interaction between data and the control structure of the language itself a means of specializing alphards loops to operate on abstract entities without explicit dependence on the representation of those entities is in troduced specification and verification techniques that allow the properties of the generators for such iterations to be expressed in the form of proof rules are developed results are obtained that for common special cases of these loops are essentially identical to the corresponding constructs in other languages a means of showing that a generator will terminate is also provided cacm august 1977 shaw m wulf w a abstraction and representation abstract data types assertions control specialization correctness generators invariants iteration statements modular decomposition program specifications programming languages programming methodology proofs of correctness types verification 420 524 ca770803 jb december 28 1977 759 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3105
a language extension for expressing constraints on data access controlled sharing of information is needed and desirable for many applications and is supported in operating systems by access control mechanisms this paper shows how to extend programming languages to provide controlled sharing the extension permits expression of access constraints on shared data access constraints can apply both to simple objects and to objects that are components of larger objects such as bank account records in a banks data base the constraints are stated declaratively and can be enforced by static checking similar to type checking the approach can be used to extend any strongly typed language but is particularly suitable for extending languages that support the notion of abstract data types cacm may 1978 jones a liskov b programming languages access control data types abstract data types type checking capabilities 420 435 ca780502 dh february 26 1979 319 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3103
automatic data structure selection an example and overview the use of several levels of abstraction has proved to be very helpful in constructing and maintaining programs when programs are designed with abstract data types such as sets and lists programmer time can be saved by automating the process of filling in low level implementation details in the past programming systems have provided only a single general purpose implementation for an abstract type thus the programs produced using abstract types were then inefficient in space or time in this paper a system for automatically choosing efficient implementations for abstract types from a library of implementations is discussed this process is discussed in detail for an example program general issues in data structure selection are also reviewed cacm may 1978 low j abstract data types automatic programming data structures optimizing compilers sets lists 412 422 46 ca780504 dh february 26 1979 151 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1861
the mad definition facility one of the first definition facilities for higher level languages is described users of the language can define new operators andor data types into the mad language so that their use appears as if they were predefined information is given on how one writes definitions as well as on much of the motivation behind the form in which definitions are written some conclusions are drawn about future definitional facilities cacm august 1969 arden b w galler b a graham r m mad definitions operators macros higher level language 412 422 ca690802 jb february 15 1978 607 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2956
some ideas on data types in high level languages a number of issues are explored concerning the notion that a data type is a set of values together with a set of primitive operations on those values among these are the need for a notation for iterating over the elements of any finite set instead of the more narrow for i 1 to n notation the use of the domain of an array as a data type the need for a simple notation for allowing types of parameters to be themselves parameters but in a restrictive fashion and resulting problems with conversion of values from one type to another cacm june 1977 gries d gehani n data types generic procedures programming languages 412 420 422 ca770607 jb december 28 1977 127 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1902
an automatic grading scheme for simple programming exercises a discussion is given of alterations that were made to a typical university operating system to record the results of programming exercises in three different languages including assembly language in this computer controlled grading scheme provision is made for testing with programmer supplied data and for final runs with system supplied data exercises run under the scheme may be mixed with other programs and no special recognition of exercises by the operators is necessary cacm may 1969 hext j b winings j w automatic grading program programming exercises 15 243 439 ca690507 jb february 17 1978 335 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2958
abstract data types and the development of data structures abstract data types can play a significant role in the development of software that is reliable efficient and flexible this paper presents and discusses the application of an algebraic technique for the specification of abstract data types among the examples presented is a top down development of a symbol table for a block structured language a discussion of the proof of its correctness is given the paper also contains a brief discussion of the problems involved in constructing algebraic specifications that are both consistent and complete cacm june 1977 guttag j abstract data type correctness proof data type data structure specification software specification 434 524 ca770605 jb december 29 1977 117 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2470
fen an axiomatic basis for program semantics a formal system is presented which abstracts the notions of data item function and relation it is argued that the system is more suitable than set theory or its derivatives for the concise and accurate description of program semantics it is shown how the system can be used to build composite data types out of simper ones with the operations of rowing structuring and uniting it is also demonstrated that completely new primitive types can be introduced into languages through the mechanism of singleton data types both deterministic and nondeterministic functions are shown to be definable in the system it is described how the local environment can be modeled as a data item and how imperative statements can be considered functions on the environment the nature of recursive functions is briefly discussed and a technique is presented by which they can be introduced into the system the technique is contrasted with the use of the paradoxical combinator y the questions of local and global environments and of various modes of function calling and parameter passing are touched upon the theory is applied to the proof of several elementary theorems concerning the semantics of the assignment conditional and iterative statements an appendix is included which presents in detail the formal system governing webs and fen the abstractions used informally in the body of the paper cacm august 1973 maclennan b j semantics formal systems lambda calculus extensible languages data types modes axioms correctness formal language definition formal description data structures description languages models of computation 422 521 524 526 ca730804 jb january 23 1978 1101 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2082
syntax directed documentation for pl 360 the language pl 360 together with its phrase structure grammar is used as a concrete basis for illustrating an idea called syntax directed documentation this idea is 1 to use the phrase structure of a program to define the structure of a formal documentation for that program 2 to use the syntactic types and identifiers in the resulting structure to trigger the automatic formation of questions to the programmer whose answers will become part of that documentation and 3 to provide automatic storage and retrieval facilities so that other programmers who want to understand or modify the program can access the resulting documentation which is cross indexed in various ways by syntactic types and objects a small pl 360 program already found in the literature is worked out as an example cacm april 1970 mills h d documentation syntax analysis pl 360 enforced documentation indexed documentation automatic interrogation phase structured grammar syntax directed documentation syntax processing 359 379 419 443 ca700402 jb february 13 1978 328 pm 
****************************
