/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1896
regular coulomb wave functions algorithm 292 s22 cacm may 1969 gautschi w coulomb wave functions wave functions regular coulomb wave functions 512 ca690513 jb february 17 1978 315 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1898
regular coulomb wave functions algorithm 292 s22 cacm may 1969 kolbig k s coulomb wave functions wave functions regular coulomb wave functions 512 ca690511 jb february 17 1978 319 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1993
regular coulomb wave functions algorithm 292 s22 cacm september 1970 cody w j paciorek k a coulomb wave functions wave functions regular coulomb wave functions 512 ca700912 jb february 10 1978 1003 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2650
order n correction for regular languages a method is presented for calculating a string b belonging to a given regular language l which is nearest in number of edit operations to a given input string a b is viewed as a reasonable correction for the possibly erroneous string a where a was originally intended to be a string of l the calculation of b by the method presented requires time proportional to a the number of characters in a the method should find applications in information retrieval artificial intelligence and spelling correction systems cacm may 1974 wagner r a error correction regular languages regular events finite state automata compiler error recovery spelling correction string best match problem correction corrector errors nondeterministic finite state automata 412 420 522 523 542 ca740503 jb january 17 1978 426 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1739
regular expression search algorithm a method for locating specific character strings embedded in character text is described and an implementation of this method in the form of a compiler is discussed the compiler accepts a regular expression as source language and produces an ibm 7094 program as object language the object program then accepts the text to be searched as input and produces a signal every time an embedded string in the text matches the given regular expression examples problems and solution are also presented cacm june 1968 thompson k search match regular expression 374 449 532 ca680606 jb february 22 1978 418 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1355
regular coulomb wave functions algorithm 292 cacm november 1966 gautschi w ca661103a jb march 2 1978 343 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2921
regular right part grammars and their parsers this paper in troduces an alternative to context free grammars called regular right part rrp grammars which resemble pascal syntax diagrams formally rrp grammars have production right parts which are nondeterministic finite state machines fsms and as a special case regular expressions since these can be converted to fsms rrp grammars describe the syntax of programming languages more concisely and more understandably than is possible with cf grammars also in troduced is a class of parsers rrp lrm k parsers which includes the cf lrk parsers and provides the same advantages informally an rrp lrm k parser can determine the right end of each handle by considering at most k symbols to the right of the handle and the left end after the right end has been found by considering at most m symbols to the left of the handle a mechanism for determining the left end is required because there is no bound on the length of the handle cacm october 1977 lalonde w r finite state machines automata regular expressions syntax diagrams lrk grammars parser construction parsing programming languages language generation formal definition compilers translators scanners 42 521 523 ca771005 jb december 27 1977 1101 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2112
translation equations input limited transduction expressions or translation equations are used to describe the syntax and left context sensitive semantics for context free languages a formal procedure is given for deriving from a set of translation equations the specifications for a pushdown translator the translator consists of mealy form finite state automata interacting by means of a pushdown stack within the framework described string recognition and parsing may be treated as special cases of the translation problem cacm february 1970 vere s automata turing machines regular expression transduction expression context free languages translation recognizers parsing meta compilers pushdown transducer syntax directed compilers finite state automata 410 412 420 522 ca700203 jb february 14 1978 1049 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1665
automatic generation of efficient lexical processors using finite state techniques the practical application of the theory of finite state automata to automatically generate lexical processors is dealt with in this tutorial article by the use of the aed rword system developed at m as part of the aed 1 system this system accepts as input description of the multicharacter items or of words allowable in a language given in terms of a subset of regular expressions the output of the system is a lexical processor which reads a string of characters and combines them into the items as defined by the regular expressions each output item is identified by a code number together with a pointer to a block of storage containing the characters and character count in the item the processors produced by the system are based on finite state machines each state of a machine corresponds to a unique condition in the lexical processing of a character string at each state a character is read and the machine changes to a new state at each transition appropriate actions are taken based on the particular character read the system has been in operation since 1966 and processors generated have compared favorably in speed to carefully hand coded programs to accomplish the same task lexical processors for aed o and mad are among the many which have been produced the techniques employed are independent of the nature of the items being evaluated if the word events is substituted for character string these processors may be described as generalized decision making mechanisms based upon an ordered sequence of events this allows the system to be used in a range of applications outside the area of lexical processing however convenient these advantages may be speed is the most important consideration in designing a system for automatic generation of a lexical processor the goal was a processor which completely eliminated backup or rereading which was nearly as fast as hand coded processors which would analyze the language and detect errors and which would be convenient and easy to use cacm december 1968 johnson w l porter j h ackley s i ross d t character string compiler finite state automata finite state machine lexical processor nondeterministic machine parsing plex structure regular expressions sequential machine syntactic analysis 363 375 412 522 524 531 ca681201 jb february 21 1978 219 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2051
a pli program to assist the comparative linguist a practical pli program is described which can assist comparative linguists to determine the regular sound correspondences between genetically related languages the investigator must arrange data for input by aligning pairs of suspected cognates the program tabulates the correspondences and uses list processing techniques to sort and count them each pair of words is then assigned a relative value that is a function of the total frequency in the data of each correspondence found in that pair of words the output is a list of all correspondence types with their frequency of occurrence in the data and a separate listing of each correspondence with all word pairs showing that correspondence unless their relative value is below an arbitrarily chosen cutoff point the article explains the usefulness as well as the limitations of the programs and illustrates its use with a small portion of hypothetical data cacm june 1970 frantz d g comparative linguistics natural language processing comparative method historical linguistics diachronic linguistics genetic relationship sound change sound correspondence regular correspondence list processing 342 ca700604 jb february 13 1978 1151 am 
****************************
