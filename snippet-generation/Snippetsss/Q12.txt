/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3127
thoth a portable real time operating system thoth isa real time operating system which is designed to be portable over a large set of machines it is currently running on two minicomputers with quite different architectures both the system and application programs which use it are written in a high level language because the system is implemented by the same software on different hardware it has the same interface to user programs hence application programs which use thoth are highly portable thoth encourages structuring programs as networks of communicating processes by providing efficient interprocess communication primitives cacm february 1979 cheriton d malcolm m melen l sager g portability real time operating systems minicomputer 380 430 435 ca790206 dh april 12 1979 910 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2246
levels of language for portable software an increasing amount of software is being implemented in a portable form a popular way of accomplishing this is to encode the software in a specially designed machine independent language and then to map this language often using a macro processor into the assembly language of each desired object machine the design of the machine independent language is the key factor in this operation this paper discusses the relative merits of pitching this language at a high level or a low level and presents some comparative results cacm december 1972 brown p j portable software level of language machine independent macro processor efficiency 412 421 422 ca721209 jb january 27 1978 1102 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3068
a model for verification of data security in operating systems program verification applied to kernel architectures forms a promising method for providing uncircumventably secure shared computer systems a precise definition of data security is developed here in terms of a general model for operating systems this model is suitable as a basis for verifying many of those properties of an operating system which are necessary to assure reliable enforcement of security the application of this approach to the ucla secure operating system is also discussed cacm september 1978 popek g farber d operating systems security protection program verification 435 524 ca780904 dh february 5 1979 240 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1930
extremely portable random number generator extremely portable subroutines are sometimes needed for which moderate quality and efficiency suffice typically this occurs for library functions like random number generation and in core sorting which are not entirely universal or are not used in a standardized way the literature on random number generators does not seem to contain an algorithm that meets requirements of this sort an extremely portable 8 line fortran program is provided which based on an important paper by coveyou and macpherson 1967sing their methods fourier analysis is applied to the probability function for the consecutive n tuples provided by our generator with n less than or equal to 4 while the small modulus which must be used to maintain portability prevents the quality of the generator from being high the generator compares well with the bounds established in the above mentioned paper cacm february 1969 kruskal j b random number generators random numbers random number analysis random generators linear sequential generators random number program pseudo random numbers 449 519 55 ca690208 jb february 20 1978 1043 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1461
discussion summary on operating systems cacm march 1966 ca660311 jb march 3 1978 126 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1462
multilevel operating systems the basic software for all newer computers is built on the well established need for standard operating systems this implies that all applications no matter how large complex or time consuming must operate under or more precisely on top of the standard system large applications require supervisory monitors which handle problems similar to those of the operating systems but at a different level sometimes still a third or even a fourth such level is required or desirable this leads naturally to the concept of multilevel systems similar vertically but different horizontally proper division of responsibility between levels leads to greater efficiency and less logical complexity while actually enhancing capability cacm march 1966 orchard hays w ca660310 jb march 3 1978 131 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2111
spelling correction in systems programs several specialized techniques are shown for efficiently incorporating spelling correction algorithms in to compilers and operating systems these include the use of syntax and semantics information the organization of restricted keyword and symbol tables and the consideration of a limited class of spelling errors sample 360 coding for performing spelling correction is presented by using systems which perform spelling correction the number of debugging runs per program has been decreased saving both programmer and machine time cacm february 1970 morgan h l spelling correction error correction debugging compilers operating systems diagnostics error detection misspelling lexical analysis systems programming 442 412 30 379 ca700204 jb february 14 1978 1040 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1728
further experimental data on the behavior of programs in a paging environment results are summarized from an empirical study directed at the measurement of program operating behavior in those multiprogramming systems in which programs are organized into fixed length pages the data collected from the interpretive execution of a number of paged programs are used to describe the frequency of page faults ie the frequency of those instants at which an executing program requires a page of data or instructions not in main core memory these data are used also for the evaluation of page replacement algorithms and for assessing the effects on performance of changes in the amount of storage allocated to executing programs cacm july 1968 coffman e g varian l c paging systems paging dynamic program behavior program behavior virtual memory systems single level storage one level storage operating system simulation operating systems supervisor simulation machine language program interpretation 413 432 439 49 ca680701 jb february 22 1978 313 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2867
modularization and hierarchy in a family of operating systems this paper describes the design philosophy used in the construction of a family of operating systems it is shown that the concepts of module and level do not coincide in a hierarchy of functions family members can share much software as a result of the implementation of run time modules at the lowest system level cacm may 1976 habermann a n flon l cooprider l incremental machine design module data type address space virtual memory 40 430 435 ca760504 jb january 4 1978 333 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-1247
an operating environment for dynamic recursive computer programming systems presented in this paper is a brief nontechnical introduction to oedipus a computer programming system which can serve as an operating environment for dynamic andor recursive programs and programming systems the available services include dynamic allocation of storage for contiguous blocks of arbitrary size input and output for a hierarchy of data types a public pushdown list for automatic recursive programming a rudimentary compiler for subroutine communication and bookkeeping and debugging aids cacm june 1965 brown w s ca650608 jb march 6 1978 1018 pm 
****************************
