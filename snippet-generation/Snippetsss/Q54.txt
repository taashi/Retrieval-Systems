/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2295
comment on the composition of semantics in algol 68 cacm august 1972 van der poel w l programming primitives programming languages algol semantics recursive composition design of programming languages data structures 13 42 422 523 524 ca720807 jb january 30 1978 929 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2732
guarded commands nondeterminacy and formal derivation of programs so called guarded commands are introduced as a building block for alternative and repetitive constructs that allow nondeterministic program components for which at least the activity evoked but possible even the final state is not necessarily uniquely determined by the initial state for the formal derivation of programs expressed in terms of these constructs a calculus will be shown cacm august 1975 dijkstra e w programming languages sequencing primitives program semantics programming language semantics nondeterminacy case construction repetition termination correctness proof derivation of programs programming methodology 420 422 ca750803 jb january 6 1978 446 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2192
another recursion induction principle an inductive method for proving things about recursively defined functions is described it is shown to be useful for proving partial functions equivalent and thus applicable in proofs about interpreters for programming languages cacm may 1971 morris jr j h recursion induction correctness proofs compiler correctness 413 42 524 ca710507 jb february 3 1978 227 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2842
the denotational semantics of programming languages this paper is a tutorial introduction to the theory of programming language semantics developed by d scott and c strachey the application of the theory to formal language specification is demonstrated and other applications are surveyed the first language considered loop is very elementary and its definition merely introduces the notation and methodology of the approach then the semantic concepts of environments stores and continuations are introduced to model classes of programming language features and the underlying mathematical theory of computation due to scott is motivated and outlined finally the paper presents a formal definition of the language gedanken cacm august 1976 tennent r d semantics programming language applicative imperative environment store continuation theory of computation higher order function recursive definition loop gedanken 422 524 ca760802 jb january 4 1978 1033 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2326
fix point approach to the theory of computation following the fix point theory of scott the semantics of computer programs are defined in terms of the least fix points of recursive programs this allows not only the justification of all existing verification techniques but also their extension to the handling in a uniform manner of various properties of computer programs including correctness termination and equivalence cacm july 1972 manna z vuillemin j verification techniques semantics of programming languages least fix points recursive programs computational induction 523 524 ca720702 jb january 30 1978 342 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2411
tree structured programs cacm november 1973 wegner e control structures flowcharts goto statements inductive assertion least fix points optimization in compilers program documentation program flow graphs programming language design proof of programs semantics of programming languages structured programming 412 422 524 ca731115 jb january 19 1978 419 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2470
fen an axiomatic basis for program semantics a formal system is presented which abstracts the notions of data item function and relation it is argued that the system is more suitable than set theory or its derivatives for the concise and accurate description of program semantics it is shown how the system can be used to build composite data types out of simper ones with the operations of rowing structuring and uniting it is also demonstrated that completely new primitive types can be introduced into languages through the mechanism of singleton data types both deterministic and nondeterministic functions are shown to be definable in the system it is described how the local environment can be modeled as a data item and how imperative statements can be considered functions on the environment the nature of recursive functions is briefly discussed and a technique is presented by which they can be introduced into the system the technique is contrasted with the use of the paradoxical combinator y the questions of local and global environments and of various modes of function calling and parameter passing are touched upon the theory is applied to the proof of several elementary theorems concerning the semantics of the assignment conditional and iterative statements an appendix is included which presents in detail the formal system governing webs and fen the abstractions used informally in the body of the paper cacm august 1973 maclennan b j semantics formal systems lambda calculus extensible languages data types modes axioms correctness formal language definition formal description data structures description languages models of computation 422 521 524 526 ca730804 jb january 23 1978 1101 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3188
semiotics and programming languages i have based my paper on semiotics and its three dimension i should insert at this point that language has many aspects and that pragmatics semantics and syntactics do not necessary cover all of them one can however project most aspects into the three semiotic dimension and there seems to be a strong tendency to do so today cacm march 1966 zemanek h ca660319 es march 17 1982 1010 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2148
the composition of semantics in algol 68 the main features of algol 68 are explained from a semantic point of view it is shown how the language permits the composition of values and actions ie ultimately programs from a minimum set of primitives with a few fundamental recursive rules of composition the associated syntax is briefly reviewed an attempt has been made to obtain a structured and simple introduction to both algol 68 and its orthogonal design cacm november 1971 branquart p lewi j sintzoff m wodon p l programming primitives programming languages algol semantics recursive composition design of programming languages data structures 13 42 422 523 524 ca711101 jb february 2 1978 1149 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2178
a language extension for graph processing and its formal semantics a simple programming language extension graspe for processing directed graphs is defined graspe consists of a type of directed graph data structure and a set of primitive operations for manipulating these structures graspe may be most easily implemented by embedding it in a host language emphasis is placed both on graspe itself and on its method of definition commonly the definition of a language involves definition of the syntactic elements and explanation of the meaning to be assigned them the semantics the definition of graspe here is solely in terms of its semantics that is the data structures and operations are defined precisely but without assignment of a particular syntactic representation only when the language is implemented is assignment of an explicit syntax necessary an example of an implementation of graspe embedded in lisp is given as an illustration the advantages and disadvantages of the definition of a language in terms of its semantics are discussed cacm july 1971 pratt t w friedman d p graph processing programming language formal semantics directed graph lisp network data structure flowchart syntax language definition 420 422 523 524 532 ca710704 jb february 3 1978 924 am 
****************************
