/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2377
a hardware architecture for implementing protection rings protection of computations and information is an important aspect of a computer utility in a system which uses segmentation as a memory addressing scheme protection can be achieved in part by associating concentric rings of decreasing access privilege with a computation this paper describes hardware processor mechanisms for implementing these rings of protection the mechanisms for implementing these rings of protection the mechanisms allow cross ring calls and subsequent returns to occur without trapping to the supervisor automatic hardware validation of references across ring boundaries is also performed thus a call by a user procedure to a protected subsystem including the supervisor is identical to a call to a companion user procedure the mechanisms of passing and referencing arguments are the same in both cases as well cacm march 1972 schroeder m d saltzer j h protection protection rings protection hardware access control hardware access control computer utility time sharing shared information segmentation virtual memory multics 432 621 ca720304 jb january 31 1978 258 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2844
heaps applied to event driven mechanisms cacm july 1976 gonnet g h discrete event simulation event scanning mechanisms priority queues heaps 434 81 ca760709 jb january 4 1978 1105 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2939
abstraction mechanisms in clu clu is a new programming language designed to support the use of abstractions in program construction work in programming methodology has led to the realization that three kinds of abstractions procedural control and especially data abstractions are useful in the programming process of these only the procedural abstraction is supported well by conventional languages through the procedure or subroutine clu provides in addition to procedures novel linguistic mechanisms that support the use of data and control abstractions this paper provides an in troduction to the abstraction mechanisms in clu by means of programming examples the utility of the three kinds of abstractions in program construction is illustrated and it is shown how clu programs may be written to use and implement abstractions the clu library which permits incremental program development with complete type checking performed at compile time is also discussed cacm august 1977 liskov b snyder a atkinson r schaffert c programming languages data types data abstractions control abstractions programming methodology separate compilation 40 412 420 422 ca770804 jb december 28 1977 749 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3128
synchronization with eventcounts and sequencers synchronization of concurrent processes requires controlling the relative ordering of events in the processes a new synchronization mechanism is proposed using abstract objects called eventcounts and sequencers that allows processes to control the ordering of events directly rather than using mutual exclusion to protect manipulations of shared variables that control ordering of events direct control of ordering seems to simplify correctness arguments and also simplifies implementation in distributed systems the mechanism is defined formally and then several examples of its use are given the relationship of the mechanism to protection mechanisms in the system is explained in particular eventcounts are shown to be applicable to situations where confinement of information matters an implementation of eventcount s and sequencers in a system with shared memory is described cacm february 1979 reed d kanodia r process synchronization interprocess communication distributed systems security models mutual exclusion semaphores 430 432 ca790207 dh april 12 1979 1003 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2558
protection in programming languages linguistic mechanisms which can be used to protect one subprogram from anothers malfunctioning are described function producing functions and various type tagging schemes are considered an attempt is made to distinguish between access limitation and authentication cacm january 1973 morris j h jr protection types environments trademarks seals access keys access control authentication secrecy 42 43 ca730103jb january 24 1978 445 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-0483
on the nonexistence of a phrase structure grammar for algol 60 algol 60 is defined partly by formal mechanisms of phrase structure grammar partly by informally stated restrictions it is shown that no formal mechanisms of the type used are sufficient to define algol 60 cacm september 1962 floyd r w ca620909 jb march 17 1978 733 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-3043
distributed processes a concurrent programming concept a language concept for concurrent processes without common variables is introduced these processes communicate and synchronize by means of procedure calls and guarded regions this concept is proposed for real time applications controlled by microcomputer networks with distributed storage the paper gives several examples of distributed processes and shows that they include procedures coroutines classes monitors processes semaphores buffers path expressions and inputoutput as special cases cacm november 1978 hansen p concurrent programming distributed processes microprocessor networks nondeterminism guarded regions programming languages process communication and scheduling sorting arrays coroutines classes monitors processes semaphores buffers path expressions inputoutput 38 42 422 432 524 ca781108 dh january 26 1979 1040 am 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2742
improved event scanning mechanisms for discrete event simulation simulation models of large complex real world applications have occasionally earned the reputation of eating up hours of computer time this problem may be attributed in part to difficulties such as slow stochastic convergence however an additional problem lies in the fact that a significant amount of bookkeeping time is required to keep future events in their proper sequence this paper presents a method for significantly reducing the time spent scanning future event lists in discrete event simulations there models are presented all of which improve in effectiveness as the events list scan problem becomes more burdensome cacm june 1975 wyman f p discrete event simulation simulation event scanning mechanisms 434 55 81 ca750611 jb january 9 1978 1243 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2767
a comparison of simulation event list algorithms four algorithms are considered which can be used to schedule events in a general purpose discrete simulation system two of the algorithms are new one is based on an end order tree structure for event notices and another uses an indexed linear list the algorithms are tested with a set of typical stochastic scheduling distributions especially chosen to show the advantages and limitations of the algorithms the end order tree algorithm is shown to be an advantageous immediate replacement for the algorithm in use with current simulation languages the most promising algorithm uses the indexed list concept it will require an adaptive routine before it can be employed in general purpose simulators but its performance is such that further study would be fruitful cacm april 1975 vaucher j g duval p simulation time flow mechanisms event list algorithm simulation time flow mechanisms event list algorithm simulation executive event scheduling routine discrete system simulation sorting 374 422 81 ca750410 jb january 9 1978 343 pm 
****************************
/Users/rohitchawla/PycharmProjects/tryingtodosomecrap/Corpus/CACM-2870
a lattice model of secure information flow this paper investigates mechanisms that guarantee secure information flow in a computer system these mechanisms are examined within a mathematical framework suitable for formulating the requirements of secure information flow among security classes the central component of the model is a lattice structure derived from the security classes and justified by the semantics of information flow the lattice properties permit concise formulations of the security requirements of different existing systems and facilitate the construction of mechanisms that enforce security the model provides a unifying view of all systems that restrict information flow enables a classification of them according to security objectives and suggests some new approaches it also leads to the construction of automatic program certification mechanisms for verifying the secure flow of information through a program cacm may 1976 denning d e protection security information flow security class lattice program certification 435 ca760501 jb january 4 1978 410 pm 
****************************
